PROGRAM -> #save_jp_main DECLARATION_LIST #jp_main $ .

DECLARATION_LIST -> DECLARATION DECLARATION_LIST |  .
DECLARATION -> #pinput TYPE_SPECIFIER #pinput id DECLARATION1 .
DECLARATION1 -> VAR_DECLARATION_CONT | FUN_DECLARATION_CONT .
VAR_DECLARATION_CONT -> #declare_var ; | [ #pinput num ] #declare_array ; .
FUN_DECLARATION_CONT -> ( PARAMS ) #pop #pop COMPOUND_STMT .

TYPE_SPECIFIER -> int | void .

PARAMS -> PARAMS_INT | PARAMS_VOID .
PARAMS_INT -> int PARAM_LIST_CONT .
PARAMS_VOID -> void PARAMS_VOID1 .
PARAMS_VOID1 -> PARAM_LIST_CONT | .

PARAM_LIST_CONT -> PARAM_CONT PARAM_LIST1 .
PARAM_LIST -> PARAM PARAM_LIST1 .
PARAM_LIST1 -> , PARAM_LIST |  .
PARAM_CONT -> id PARAM1 .
PARAM -> TYPE_SPECIFIER PARAM_CONT .
PARAM1 -> [ ] |  .

COMPOUND_STMT -> { DECLARATION_LIST STATEMENT_LIST } .
STATEMENT_LIST -> STATEMENT STATEMENT_LIST |  .
STATEMENT -> EXPRESSION_STMT | COMPOUND_STMT | SELECTION_STMT | ITERATION_STMT | RETURN_STMT | SWITCH_STMT .
EXPRESSION_STMT -> EXPRESSION #pop ; | continue #continue ; | break #break ; | ; .
SELECTION_STMT -> if ( EXPRESSION ) #save STATEMENT else #jpf_save STATEMENT #jp .
ITERATION_STMT -> while #label ( EXPRESSION ) #save STATEMENT #while .
RETURN_STMT -> return RETURN_STMT1 .
RETURN_STMT1 -> ; | EXPRESSION ; .
SWITCH_STMT -> switch ( EXPRESSION ) { CASE_STMTS DEFAULT_STMT } .
CASE_STMTS -> CASE_STMT CASE_STMTS |  .
CASE_STMT -> case num : STATEMENT_LIST .
DEFAULT_STMT -> default : STATEMENT_LIST |  .

EXPRESSION -> #pid id EXPRESSION1 | SIMPLE_EXPRESSION_NO_ID .
EXPRESSION1 -> VAR1 EXPRESSION2 | SIMPLE_EXPRESSION_ID_CONT_NO_VAR1 .
EXPRESSION2 -> = EXPRESSION #assign | SIMPLE_EXPRESSION_ID_CONT_VAR1_CONT .

VAR1 -> [ EXPRESSION ] #calc_cell |  .

SIMPLE_EXPRESSION_ID_CONT_NO_VAR1 -> ADDITIVE_EXPRESSION_ID_CONT_NO_VAR1 SIMPLE_EXPRESSION1 .
SIMPLE_EXPRESSION_ID_CONT_VAR1_CONT -> ADDITIVE_EXPRESSION_ID_CONT_VAR1_CONT SIMPLE_EXPRESSION1 .
SIMPLE_EXPRESSION_NO_ID -> ADDITIVE_EXPRESSION_NO_ID SIMPLE_EXPRESSION1 .
SIMPLE_EXPRESSION1 -> #pinput RELOP ADDITIVE_EXPRESSION #calcop |  .

RELOP -> < | == .

ADDITIVE_EXPRESSION -> TERM ADDITIVE_EXPRESSION1 .
ADDITIVE_EXPRESSION1 -> #pinput ADDOP TERM #calcop ADDITIVE_EXPRESSION1 |  .
ADDITIVE_EXPRESSION_ID_CONT_NO_VAR1 -> TERM_ID_CONT_NO_VAR1 ADDITIVE_EXPRESSION1 .
ADDITIVE_EXPRESSION_ID_CONT_VAR1_CONT -> TERM_ID_CONT_VAR1_CONT ADDITIVE_EXPRESSION1 .
ADDITIVE_EXPRESSION_NO_ID -> TERM_NO_ID ADDITIVE_EXPRESSION1 .

ADDOP -> + | - .

TERM -> SIGNED_FACTOR TERM1 .
TERM1 -> #pinput * SIGNED_FACTOR #calcop TERM1 |  .
TERM_NO_ID -> SIGNED_FACTOR_NO_ID TERM1 .
TERM_ID_CONT_NO_VAR1 -> ( ARGS ) #function_call TERM1 .
TERM_ID_CONT_VAR1_CONT -> TERM1 .

SIGNED_FACTOR -> FACTOR | #pinput ADDOP FACTOR #calc_signed_factor .
SIGNED_FACTOR_NO_ID -> FACTOR_NO_ID | #pinput ADDOP FACTOR #calc_signed_factor .

FACTOR_NO_ID -> ( EXPRESSION ) | #pnum num .
FACTOR_ID_CONT -> VAR1 | ( ARGS ) #function_call .
FACTOR -> ( EXPRESSION ) | #pid id FACTOR_ID_CONT | #pnum num .

ARGS -> ARG_LIST |  .
ARG_LIST -> EXPRESSION ARG_LIST1 .
ARG_LIST1 -> , ARG_LIST |  .